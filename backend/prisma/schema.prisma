generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())

  first_name String

  last_name String

  email String @unique

  role Role @default(BASIC)

  password String

  created_at DateTime @default(now())

  updated_at DateTime @updatedAt

  connect_google_calendar Boolean @default(true)

  receive_updates Boolean @default(false)

  google_acces_token String?

  google_refresh_token String?

  google_token_expiry DateTime?

  google_calendar_id String?

  google_calendar_email String?

  Task Task[]

  Category Category[]

  Comment Comment[]
}

model Task {
  id Int @id @default(autoincrement())

  title String

  description String

  status String

  priority String

  due_date DateTime

  start_date DateTime

  created_at DateTime @default(now())

  updated_at DateTime @updatedAt

  google_calendar_event String?

  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id String

  subtasks Subtask[]

  comments Comment[]

  categories Category[] @relation("TaskToCategory")

  tags Tag[] @relation("TaskToTag")
}

model Category {
  id Int @id @default(autoincrement())

  name String

  description String

  created_at DateTime @default(now())

  updated_at DateTime @updatedAt

  tasks Task[] @relation("TaskToCategory")

  user_id String?

  user User? @relation(fields: [user_id], references: [id], onDelete: SetNull)
}

model Subtask {
  id Int @id @default(autoincrement())

  title String

  description String

  status String

  priority String

  due_date DateTime

  start_date DateTime

  created_at DateTime @default(now())

  updated_at DateTime @updatedAt

  task_id Int

  task Task @relation(fields: [task_id], references: [id], onDelete: Cascade)
}

model Comment {
  id Int @id @default(autoincrement())

  content String

  created_at DateTime @default(now())

  updated_at DateTime @updatedAt

  task_id Int

  task Task @relation(fields: [task_id], references: [id], onDelete: Cascade)

  user_id String

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Tag {
  id Int @id @default(autoincrement())

  name String @unique
  
  color String?

  description String

  created_at DateTime @default(now())

  updated_at DateTime @updatedAt

  tasks Task[] @relation("TaskToTag")
}

enum Role {
  BASIC
  ADMIN
}
